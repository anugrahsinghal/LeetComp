name: Automatic Data Update

on:
  schedule:
    - cron: "0 0 */2 * *"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        python-version: ["3.9"]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Install poetry
        run: pip install poetry

      - name: Setup project
        run: poetry install

      - name: Run update script
        run: |
          poetry shell
          export PYTHONPATH=.
          python update.py

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b update-$(date +'%Y%m%d')
          git add .
          git commit -m "Update data"
          git push origin HEAD

# name: Automatic Data Update

# on:
#   schedule:
#     - cron:  '0 0 */2 * *'

# jobs:
#   automatic-data-update:
#     name: "Automatic Data Update"
#     runs-on: "ubuntu-latest"

#     strategy:
#       matrix:
#         python-version: ["3.9"]
#       fail-fast: false

#     steps:
#       - uses: actions/checkout@v3
#         with:
#           ref: develop
#       - uses: "actions/setup-python@v2"
#         with:
#           python-version: "${{ matrix.python-version }}"
#       - name: "Install Poetry"
#         run: "python -m pip install poetry"
#       - name: "Install dependencies"
#         run: "python -m poetry install"
#       - name: "Run Script to Fetch Data"
#         run: |
#           export PYTHONPATH=.
#           python update.py

#       - name: "Commit & Push the data"
#         run: |
#           git config user.name github-actions
#           git config user.email github-actions@github.com
#           git add .
#           git commit -m "Automatic data update"
#           git push
#       - name: Create Pull Request
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const { repo, owner } = context.repo;
#             const result = await github.rest.pulls.create({
#               title: 'Automatic Data Update',
#               owner,
#               repo,
#               head: '${{ github.ref_name }}',
#               base: 'main',
#               body: [
#                 'Automatic LeetCode data update',
#               ]
#             });
